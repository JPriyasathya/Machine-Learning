# -*- coding: utf-8 -*-
"""ML MINI PROJECT

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ljx7H0aTagrLy0IhFKkQ02UWKQ_YS0mU

# **HARNESSING MACHINE LEARNING FOR BREAST CANCER DIAGNOSIS**

---
"""

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
import seaborn as sns

tumor_df=pd.read_csv("/content/tumor.csv")
tumor_df

from google.colab import drive
drive.mount('/content/drive')

tumor_df.shape

tumor_df.isnull().sum()

tumor_df.dtypes

"""# Data pre-processing"""

tumor_df =tumor_df.drop('Sample code number', axis=1)
tumor_df

"""# Data visualization"""

tumor_df.describe()

tumor_df.corr()

plt.figure(figsize=(10, 10))
sns.heatmap(tumor_df.corr(), annot=True, fmt='.0%')

sns.pairplot(tumor_df, hue='Class')

"""# Separating X, Y"""

X =tumor_df.drop(['Class'], axis=1)
X.head()

y =tumor_df['Class']
y.head()

"""# Data scaling"""

from sklearn.preprocessing import StandardScaler
std = StandardScaler()
X_std = std.fit_transform(X)
X_std

"""# Train_Test_Split"""

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X_std, y, test_size=0.30, random_state=42)

"""# **Appling algorithms**

"""

#Logistic Regression

from sklearn.linear_model import LogisticRegression
logr = LogisticRegression(random_state=42)
logr.fit(X_train, y_train)
logr.score(X_test, y_test)

from sklearn.metrics import confusion_matrix, classification_report, precision_score, recall_score, f1_score
import matplotlib.pyplot as plt
import seaborn as sns

# Predict the labels for the test set
y_pred = logr.predict(X_test)

# Generate confusion matrix
lcm = confusion_matrix(y_test, y_pred)

plt.figure(figsize=(4, 4))
sns.heatmap(lcm, annot=True, fmt="d", cmap="Blues", cbar=False)
plt.xlabel('Predicted labels')
plt.ylabel('True labels')
plt.title('Confusion Matrix')
plt.show()

#Decision Tree

from sklearn.tree import DecisionTreeClassifier
tree = DecisionTreeClassifier(criterion='entropy', random_state=42)
tree.fit(X_train, y_train)
tree.score(X_test, y_test)

from sklearn.metrics import confusion_matrix
import matplotlib.pyplot as plt
import seaborn as sns

y_pred = tree.predict(X_test)

dcm = confusion_matrix(y_test, y_pred)

# Plot confusion matrix
plt.figure(figsize=(8, 6))
sns.heatmap(dcm, annot=True, fmt="d", cmap="Blues", cbar=False)
plt.xlabel('Predicted labels')
plt.ylabel('True labels')
plt.title('Confusion Matrix')
plt.show()

#Random Forest

from sklearn.ensemble import RandomForestClassifier
forest = RandomForestClassifier(n_estimators=10, criterion='entropy', random_state=42)
forest.fit(X_train, y_train)
forest.score(X_test, y_test)

from sklearn.metrics import confusion_matrix
import matplotlib.pyplot as plt
import seaborn as sns

y_pred = forest.predict(X_test)

rcm = confusion_matrix(y_test, y_pred)

# Plot confusion matrix
plt.figure(figsize=(8, 6))
sns.heatmap(rcm, annot=True, fmt="d", cmap="Blues", cbar=False)
plt.xlabel('Predicted labels')
plt.ylabel('True labels')
plt.title('Confusion Matrix')
plt.show()

#KNN

from sklearn.neighbors import KNeighborsClassifier
knn = KNeighborsClassifier(n_neighbors=10)
knn.fit(X_train, y_train)
knn.score(X_test, y_test)

from sklearn.metrics import confusion_matrix
import matplotlib.pyplot as plt
import seaborn as sns

y_pred = knn.predict(X_test)

kcm = confusion_matrix(y_test, y_pred)

plt.figure(figsize=(4,4))
sns.heatmap(kcm, annot=True, fmt="d", cmap="Blues", cbar=False)
plt.xlabel('Predicted labels')
plt.ylabel('True labels')
plt.title('Confusion Matrix')
plt.show()

#SVM

from sklearn.svm import SVC
svm = SVC(gamma='auto')
svm.fit(X_train, y_train)
svm.score(X_test, y_test)

from sklearn.metrics import confusion_matrix
import matplotlib.pyplot as plt
import seaborn as sns

y_pred = svm.predict(X_test)

scm = confusion_matrix(y_test, y_pred)

# Plot confusion matrix
plt.figure(figsize=(4, 4))
sns.heatmap(scm, annot=True, fmt="d", cmap="Blues", cbar=False)
plt.xlabel('Predicted labels')
plt.ylabel('True labels')
plt.title('Confusion Matrix')
plt.show()